import logging
from typing import Optional, List, Dict
from datetime import datetime
from aiogram.filters import CommandObject
import pytz
import requests
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import BotCommand
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold
from aiogram import F, types
from django.utils.timezone import get_current_timezone as get_local_timezone


logger = logging.getLogger(__name__)


class TelegramBot:
    def __init__(self, token: str, api_url: str):
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.api_url = api_url.rstrip('/')

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.message.register(self._handle_start, Command('start'))
        self.dp.message.register(self._handle_mytasks, Command('mytasks'))
        self.dp.message.register(self._handle_done, Command('done'))

        self.dp.callback_query.register(self._handle_callbacks, F.data.startswith("show_my_tasks"))

    async def _get_user_tasks(self, user_id: int, status: str = None) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API"""
        try:
            params = {'telegram_user_id': user_id}
            if status:
                params['status'] = status

            response = requests.get(
                f"{self.api_url}/tasks/",
                params=params,
                timeout=10
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"API request error: {e}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            return None

    async def _update_task_status(self, task_id: int) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ 'done'"""
        try:
            response = requests.patch(
                f"{self.api_url}/tasks/{task_id}/",
                json={'status': 'done'},
                timeout=10
            )
            return response.ok
        except requests.exceptions.RequestException as e:
            logger.error(f"API request error: {e}")
            return False
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            return False

    async def _format_task(self, task: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.

        Args:
            task: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏ –∏–∑ API

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        –ü—Ä–∏–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:
            <b>üîπ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>
            <u>–°—Ç–∞—Ç—É—Å</u>: ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞
            <u>ID</u>: <code>42</code>
            <u>–î–µ–¥–ª–∞–π–Ω</u>: 20.05.2025 14:30
            <u>–û–ø–∏—Å–∞–Ω–∏–µ</u>: –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è...
            ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        """
        try:
            # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            task_id = task.get('id', 'N/A')
            title = task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')

            # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if task.get('status') == 'done' else "üïí –í —Ä–∞–±–æ—Ç–µ"

            # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
            description = task.get('description') or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
            description = (description[:100] + "...") if len(description) > 100 else description

            # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
            deadline_text = "–ù–µ —É–∫–∞–∑–∞–Ω"
            if task.get('deadline'):
                try:
                    deadline_utc = datetime.fromisoformat(task['deadline']) if isinstance(task['deadline'], str) else \
                    task['deadline']
                    if not deadline_utc.tzinfo:
                        deadline_utc = pytz.UTC.localize(deadline_utc)

                    local_tz = get_local_timezone()
                    deadline_local = deadline_utc.astimezone(local_tz)
                    deadline_text = deadline_local.strftime('%d.%m.%Y %H:%M')
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
                    deadline_text = f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ({task['deadline']})"

            # 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            return (
                f"<b>üîπ {title}</b>\n"
                f"<u>–°—Ç–∞—Ç—É—Å</u>: {status}\n"
                f"<u>ID</u>: <code>{task_id}</code>\n"
                f"<u>–î–µ–¥–ª–∞–π–Ω</u>: {deadline_text}\n"
                f"<u>–û–ø–∏—Å–∞–Ω–∏–µ</u>: {description}\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )
        except Exception as e:
            logger.error(f"Critical error formatting task {task.get('id')}: {e}")
            return (
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏\n"
                f"ID: {task.get('id', 'unknown')}\n"
                f"–û—à–∏–±–∫–∞: {str(e)}"
            )

    async def _handle_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "<b>üöÄ Task Manager Bot</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n\n"
            "<u>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</u>:\n"
            "/mytasks - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏\n"
            "/done &lt;ID&gt; - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n\n"
            "–ó–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ API."
        )
        await message.answer(welcome_text, parse_mode='HTML')
    async def _handle_mytasks(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mytasks"""
        tasks = await self._get_user_tasks(message.from_user.id)

        if tasks is None:
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if not tasks:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á!")
            return

        response_text = [f"{hbold('üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:')}\n"]
        for task in tasks:
            response_text.append(await self._format_task(task))

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        message_text = "\n\n".join(response_text)
        if len(message_text) > 4000:
            for part in [message_text[i:i + 4000] for i in range(0, len(message_text), 4000)]:
                await message.answer(part, parse_mode='HTML')
        else:
            await message.answer(message_text, parse_mode='HTML')

    async def _handle_callbacks(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            await callback.answer()  # –£–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ

            if callback.data == "show_my_tasks":
                await self._handle_mytasks(callback.message)
                await callback.message.delete()

            elif callback.data == "delete_message":
                await callback.message.delete()

        except Exception as e:
            logger.error(f"Callback error: {str(e)}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

    async def _show_done_usage(self, message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é /done"""
        msg = await message.answer(
            "‚úèÔ∏è <b>–ö–∞–∫ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π?</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/done ID_–∑–∞–¥–∞—á–∏</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/done 42</code>\n\n"
            "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å ID –∑–∞–¥–∞—á, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mytasks",
            parse_mode="HTML"
        )

    async def _show_invalid_id(self, message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ–º ID"""
        msg = await message.answer(
            "üî¢ <b>ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/done 42</code>",
            parse_mode="HTML"
        )

    async def _handle_done(self, message: types.Message, command: CommandObject):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /done —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º"""
        if not command.args:
            return await self._show_done_usage(message)

        try:
            task_id = int(command.args.strip())
        except ValueError:
            return await self._show_invalid_id(message)

        loading_msg = await message.answer("‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏...")

        try:
            success = await self._update_task_status(task_id)
        except Exception as e:
            logger.error(f"Error updating task {task_id}: {str(e)}")
            await loading_msg.delete()
            return await message.answer(
                "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                parse_mode="HTML"
            )

        await loading_msg.delete()

        if success:
            builder = InlineKeyboardBuilder()
            builder.row(
                types.InlineKeyboardButton(
                    text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏",
                    callback_data="show_my_tasks"
                ),
                types.InlineKeyboardButton(
                    text="‚úÖ –ì–æ—Ç–æ–≤–æ",
                    callback_data="delete_message"
                )
            )

            await message.answer(
                f"‚úÖ <b>–ó–∞–¥–∞—á–∞ ID {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>",
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∫–æ–º–∞–Ω–¥–æ–π /mytasks",
                parse_mode="HTML"
            )

    async def setup_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –±–æ—Ç–∞"""
        commands = [
            BotCommand(command="start", description="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
            BotCommand(command="mytasks", description="–ú–æ–∏ –∑–∞–¥–∞—á–∏"),
            BotCommand(command="done", description="–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"),
        ]
        await self.bot.set_my_commands(commands)

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.setup_commands()
        logger.info("Bot started")
        await self.dp.start_polling(self.bot, skip_updates=True)